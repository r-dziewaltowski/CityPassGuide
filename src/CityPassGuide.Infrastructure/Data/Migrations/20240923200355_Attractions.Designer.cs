// <auto-generated />
using System;
using CityPassGuide.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CityPassGuide.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240923200355_Attractions")]
    partial class Attractions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityCardId");

                    b.HasIndex("CityId");

                    b.ToTable("Attraction");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DailyTransportCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.CityCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CoversTransport")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("CityCards");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CityPassGuide.Core.ContributorAggregate.Contributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.Attraction", b =>
                {
                    b.HasOne("CityPassGuide.Core.CityPassAggregate.CityCard", null)
                        .WithMany("Attractions")
                        .HasForeignKey("CityCardId");

                    b.HasOne("CityPassGuide.Core.CityPassAggregate.City", null)
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.City", b =>
                {
                    b.HasOne("CityPassGuide.Core.CityPassAggregate.Country", null)
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.CityCard", b =>
                {
                    b.HasOne("CityPassGuide.Core.CityPassAggregate.City", null)
                        .WithMany("CityCards")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CityPassGuide.Core.CityPassAggregate.DateRange", "ValidityPeriod", b1 =>
                        {
                            b1.Property<int>("CityCardId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("TEXT");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("CityCardId");

                            b1.ToTable("CityCards");

                            b1.WithOwner()
                                .HasForeignKey("CityCardId");
                        });

                    b.Navigation("ValidityPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("CityPassGuide.Core.ContributorAggregate.Contributor", b =>
                {
                    b.OwnsOne("CityPassGuide.Core.ContributorAggregate.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("ContributorId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Extension")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ContributorId");

                            b1.ToTable("Contributors");

                            b1.WithOwner()
                                .HasForeignKey("ContributorId");
                        });

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.City", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("CityCards");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.CityCard", b =>
                {
                    b.Navigation("Attractions");
                });

            modelBuilder.Entity("CityPassGuide.Core.CityPassAggregate.Country", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
